import argparse
import mariadb
import os
import textwrap
import sys
import time

pj = os.path.join


class CfpSphinx(object):
    """Pull data from CFP database and generate corresponding
    reStructuredText files into a Sphinx source path using templates.
    """

    def __init__(
            self, db_user, db_user_passwd, db_host, db_port, db_database):
        super(CfpSphinx, self).__init__()

        # Connect to MariaDB Platform
        try:
            conn = mariadb.connect(
                user=db_user,
                password=db_user_passwd,
                host=db_host,
                port=db_port,
                database=db_database
            )

        except mariadb.Error as e:
            print(f"Error connecting to MariaDB Platform: {e}")
            sys.exit(1)

        self.cur = conn.cursor()

        self.root_dir = os.path.join(
            os.path.abspath(os.getcwd()), 'nsa', 'cfp')

        # cfp/gubernia/index.rst
        # cfp/gubernia/<:id>/uezd/index.rst
        # cfp/gubernia/<:id>/uezd/<:id>/locality/index.rst
        # cfp/gubernia/<:id>/uezd/<:id>/locality/<:id>/church/index.rst
        self.tree_templ = textwrap.dedent("""
        .. Tree RST template
        .. Autogenerated by cfp-sphinx.py

        {_title_}

        .. toctree::
           :maxdepth: {_maxdepth_}

        {_members_}

        """)

        # cfp/gubernia/<:id>/uezd/<:id>/locality/<:id>/church/<:id>/index.rst
        self.datasheet_templ = textwrap.dedent("""
        .. Church datasheet RST template
        .. Autogenerated by cfp-sphinx.py

        .. index:: {_index_}

        {_title_}

        .. list-table::
           :widths: 5, 15, 15, 5, 10, 30
           :header-rows: 1

           * - #
             - Вид документа
             - Шифр
             - Листов
             - Примечание
             - Комментарий

        {_datasheet_}

        """)

        self.__current_gub = ''

    def make_dirs(self, path):
        """ Creates directories using path"""
        try:
            os.makedirs(os.path.join(self.root_dir, path), exist_ok=True)
        except OSError as e:
            print(f"Could not create directory: {e}")
            sys.exit(1)

    def cd(self, path):
        """ Change current directory"""
        try:
            os.chdir(os.path.join(self.root_dir, path))
        except OSError as e:
            print(f"Could not change directory: {e}")
            sys.exit(1)

    def file_write(self, fn, rst):
        """Writes RST content to file, creates one if not exists"""
        file = open(os.path.join(self.root_dir, fn), 'w+')
        file.write(rst)
        file.close()

    def format3(self, name):
        """Prepend 3 wite spaces."""
        return '   %s' % name

    def format_header(self, name):
        """Underline heder name"""
        return '%s\n' % name + ('=' * len(name))

    def __gen_tree_index(self, path, title='', maxdepth=1, members=''):
        """Creates RST index file using template"""
        rst = self.tree_templ.format(
            _title_=title,
            _maxdepth_=maxdepth,
            _members_=members)

        self.file_write(pj(path, 'index.rst'), rst)

    def __gen_gubernias(self, root_dir):
        self.make_dirs(root_dir)

        self.cur.execute("SELECT id, name FROM cfp_gubernia")
        gubernias = self.cur.fetchall()

        _g_list = ''

        for (g_id, g_name) in gubernias:
            self.__current_gub = g_name
            print("%s\tprocesing..." % self.__current_gub, end=' ', flush=True)

            _g_list += self.format3(f'gubernia/{g_id}/index\n')

            child_dir = pj(root_dir, 'gubernia', str(g_id))
            self.make_dirs(child_dir)

            self.__gen_uezds(g_id, g_name, child_dir)

            print("\r%s\tDone!     " %
                  self.__current_gub, end='\n', flush=True)

        self.__gen_tree_index(
            self.root_dir,
            members=_g_list,
            maxdepth=2)

    def __gen_uezds(self, g_id, g_name, pdir):
        self.cur.execute(
            "SELECT id, name FROM cfp_uezd WHERE gub_id=?", (g_id,))
        uezds = self.cur.fetchall()

        _u_list = ''

        for (u_id, u_name) in uezds:
            _u_list += self.format3(f'uezd/{u_id}/index\n')

            child_dir = pj(pdir, 'uezd', str(u_id))
            self.make_dirs(child_dir)

            self.__gen_localities(u_id, u_name, child_dir)

        self.__gen_tree_index(
            path=pdir,
            title=self.format_header(g_name),
            members=_u_list,
            maxdepth=2)

    def __gen_localities(self, u_id, u_name, pdir):
        self.cur.execute(
            "SELECT id, name FROM cfp_locality WHERE uezd_id=?", (u_id,))
        localities = self.cur.fetchall()

        _l_list = ''

        for (l_id, l_name) in localities:
            _l_list += self.format3(f'locality/{l_id}/index\n')

            child_dir = pj(pdir, 'locality', str(l_id))
            self.make_dirs(child_dir)

            self.__gen_churches(l_id, l_name, child_dir)

        self.__gen_tree_index(
            path=pdir,
            title=self.format_header(u_name),
            members=_l_list)

    def __gen_churches(self, l_id, l_name, pdir):
        self.cur.execute(
            "SELECT id, name FROM cfp_church WHERE locality_id=?", (l_id,))
        churches = self.cur.fetchall()

        _ch_list = ''

        for (ch_id, ch_name) in churches:
            _ch_list += self.format3(f'church/{ch_id}/index\n')

            child_dir = pj(pdir, 'church', str(ch_id))
            self.make_dirs(child_dir)

            self.__gen_datasheets(ch_id, ch_name, child_dir)

        self.__gen_tree_index(
            path=pdir,
            title=self.format_header(l_name),
            members=_ch_list)

    def __gen_datasheets(self, ch_id, ch_name, pdir):
        #query = "SELECT \
        #(SELECT GROUP_CONCAT(cfp_docflag.name ORDER BY cfp_docflag.name SEPARATOR '/') \
        #FROM cfp_docflags LEFT JOIN cfp_docflag \
        #ON cfp_docflags.docflag_id=cfp_docflag.id \
        #WHERE cfp_docflags.doc_id=%s) AS flags \
        #FROM cfp_docflags WHERE cfp_docflags.doc_id=%s" % (doc_id, doc_id)

        self.cur.execute(
            "SELECT cfp_doctype.name AS dtname, \
            CONCAT('Ф.', cfp_fund.name, ' Оп.', cfp_doc.inventory, ' Д.', cfp_doc.unit) AS unit, \
            cfp_doc.sheets, \
            (SELECT GROUP_CONCAT(cfp_docflag.name ORDER BY cfp_docflag.name SEPARATOR ', ') \
            FROM cfp_docflags LEFT JOIN cfp_docflag \
            ON cfp_docflags.docflag_id=cfp_docflag.id \
            WHERE cfp_docflags.doc_id=cfp_doc.id) AS flags, \
            cfp_doc.comment FROM cfp_doc \
            LEFT JOIN cfp_doctype ON cfp_doc.doctype_id=cfp_doctype.id \
            LEFT JOIN cfp_fund ON cfp_doc.fund_id=cfp_fund.id \
            WHERE cfp_doc.church_id=?", (ch_id,))
        data = self.cur.fetchall()

        table = ''
        counter = 1

        for row in data:
            _s = self.format3('* - ' + str(counter) + '\n')
            for col in row:
                if col is not None:
                    col = str(col).replace('\n', '\n\n       ')
                else:
                    col = ''
                _s += self.format3('  - ' + col + '\n')

            table += _s
            counter += 1

        rst = self.datasheet_templ.format(
            _index_=ch_name,
            _title_=self.format_header(ch_name),
            _datasheet_=table)
        self.file_write(pj(pdir, 'index.rst'), rst)

    def generate(self):
        self.__gen_gubernias(self.root_dir)


def main():
    parser = argparse.ArgumentParser(
        description='CfpSphinx RST autogen 2020 Sakharuk Alexander')

    parser.add_argument('--db', default='cfp',
                        action='store', help='Database name')
    parser.add_argument('--host', default='localhost',
                        action='store', help='Database hostname')
    parser.add_argument('--port', default=3306,
                        action='store', help='Database port')
    parser.add_argument('--password', default='',
                        action='store', help='Database password')
    parser.add_argument('--user', default='root',
                        action='store', help='Database username')

    args = parser.parse_args()

    cfpsphinx = CfpSphinx(args.user, args.password,
                          args.host, args.port, args.db)
    cfpsphinx.generate()


if __name__ == '__main__':
    main()
